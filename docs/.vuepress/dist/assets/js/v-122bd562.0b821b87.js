"use strict";(self.webpackChunkvuepress_custom=self.webpackChunkvuepress_custom||[]).push([[336],{5043:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-122bd562",path:"/web/vue/vue-router/",title:"vue-router源码阅读笔记",lang:"zh-CN",frontmatter:{lang:"zh-CN",title:"vue-router源码阅读笔记",description:"vue-router源码阅读笔记"},excerpt:"",headers:[{level:2,title:"matcher",slug:"matcher",children:[{level:3,title:"createRouteMap",slug:"createroutemap",children:[]},{level:3,title:"match",slug:"match",children:[]}]},{level:2,title:"history",slug:"history",children:[{level:3,title:"HashHistory ：使用 URL hash 值来作路由",slug:"hashhistory-使用-url-hash-值来作路由",children:[]},{level:3,title:"HTML5History：依赖 HTML5 History API",slug:"html5history-依赖-html5-history-api",children:[]},{level:3,title:"transitionTo",slug:"transitionto",children:[]},{level:3,title:"router-view组件",slug:"router-view组件",children:[]}]},{level:2,title:"transitionTo导航守卫的实现",slug:"transitionto导航守卫的实现",children:[{level:3,title:"1.执行resolveQueue方法",slug:"_1-执行resolvequeue方法",children:[]},{level:3,title:"2.收集守卫队列",slug:"_2-收集守卫队列",children:[]},{level:3,title:"3.执行runQueue方法",slug:"_3-执行runqueue方法",children:[]},{level:3,title:"4.fn方法",slug:"_4-fn方法",children:[]}]},{level:2,title:"scrollBehavior",slug:"scrollbehavior",children:[{level:3,title:"scrollRestoration",slug:"scrollrestoration",children:[]},{level:3,title:"监听popstate事件触发saveScrollPosition",slug:"监听popstate事件触发savescrollposition",children:[]},{level:3,title:"监听popstate或者hashchange事件触发handleScroll",slug:"监听popstate或者hashchange事件触发handlescroll",children:[]}]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"web/vue/vue-router/README.md",git:{updatedTime:1645520726e3,contributors:[{name:"zhanghongan",email:"zhanghongan2021@163.com",commits:1}]}}},8977:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<p>VueRouter构造器最主要的两点：1.创建matcher对象 2.创建history对象</p><h2 id="matcher" tabindex="-1"><a class="header-anchor" href="#matcher" aria-hidden="true">#</a> matcher</h2><p>matcher实现 match、addRoutes、addRoute、getRoutes的方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">export</span> type Matcher <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//调用createRouteMap方法实现以下方法</span>\n  <span class="token function-variable function">addRoutes</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">routes<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteConfig<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">addRoute</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">parentNameOrRoute<span class="token operator">:</span> string <span class="token operator">|</span> RouteConfig<span class="token punctuation">,</span> route<span class="token operator">?</span><span class="token operator">:</span> RouteConfig</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">getRoutes</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">//传入Location通过规则匹配返回route</span>\n  <span class="token function-variable function">match</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">raw<span class="token operator">:</span> RawLocation<span class="token punctuation">,</span> current<span class="token operator">?</span><span class="token operator">:</span> Route<span class="token punctuation">,</span> redirectedFrom<span class="token operator">?</span><span class="token operator">:</span> Location</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Route<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="createroutemap" tabindex="-1"><a class="header-anchor" href="#createroutemap" aria-hidden="true">#</a> createRouteMap</h3><blockquote><p>routes 递归调用实现=&gt; pathList、pathMap、 nameMap</p><p>addRoutes、addRoute、getRoutes 使用同样的方法，把新增内容加入pathList、pathMap、 nameMap</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pathList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;path1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;path2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;alias1&#39;</span><span class="token punctuation">]</span>\npathMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  path1<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//record1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  path2<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//record2</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  alias1<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//record1 匹配上path的路径</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\nnameMap <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name1<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//record1  </span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  name2<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//record2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n <span class="token keyword">const</span> record <span class="token operator">=</span> <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> normalizedPath<span class="token punctuation">,</span>\n    regex<span class="token operator">:</span> <span class="token function">compileRouteRegex</span><span class="token punctuation">(</span>normalizedPath<span class="token punctuation">,</span> pathToRegexpOptions<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//匹配规则</span>\n    components<span class="token operator">:</span> route<span class="token punctuation">.</span>components <span class="token operator">||</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> route<span class="token punctuation">.</span>component <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    alias<span class="token operator">:</span> route<span class="token punctuation">.</span>alias\n      <span class="token operator">?</span> <span class="token keyword">typeof</span> route<span class="token punctuation">.</span>alias <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n        <span class="token operator">?</span> <span class="token punctuation">[</span>route<span class="token punctuation">.</span>alias<span class="token punctuation">]</span>\n        <span class="token operator">:</span> route<span class="token punctuation">.</span>alias\n      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    instances<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    enteredCbs<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    name<span class="token punctuation">,</span>\n    parent<span class="token punctuation">,</span>\n    matchAs<span class="token punctuation">,</span> <span class="token comment">//</span>\n    redirect<span class="token operator">:</span> route<span class="token punctuation">.</span>redirect<span class="token punctuation">,</span>\n    beforeEnter<span class="token operator">:</span> route<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span>\n    meta<span class="token operator">:</span> route<span class="token punctuation">.</span>meta <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    props<span class="token operator">:</span>\n      route<span class="token punctuation">.</span>props <span class="token operator">==</span> <span class="token keyword">null</span>\n        <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n        <span class="token operator">:</span> route<span class="token punctuation">.</span>components\n        <span class="token operator">?</span> route<span class="token punctuation">.</span>props\n        <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> route<span class="token punctuation">.</span>props <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><blockquote><p>传入Location通过规则匹配，从pathList、pathMap、nameMap找到record，封装成route返回</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//举例</span>\nlocation <span class="token operator">=</span> <span class="token punctuation">{</span>\n   hash<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n   params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n   path<span class="token operator">:</span> <span class="token string">&quot;/items/:id/logs&quot;</span><span class="token punctuation">,</span>\n   name<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n   query<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> record <span class="token operator">=</span> nameMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n      <span class="token operator">...</span><span class="token comment">//params结合record.regex中的keys，给path进行赋值，生成完整的path = /items/1/logs</span>\n       <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> redirectedFrom<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n    <span class="token comment">//循环pathList</span>\n     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> path <span class="token operator">=</span> pathList<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token keyword">const</span> record <span class="token operator">=</span> pathMap<span class="token punctuation">[</span>path<span class="token punctuation">]</span>\n        <span class="token comment">//匹配规则成功，获取对应的值  </span>\n         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">matchRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>regex<span class="token punctuation">,</span> location<span class="token punctuation">.</span>path<span class="token punctuation">,</span> location<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token function">_createRoute</span><span class="token punctuation">(</span>record<span class="token punctuation">,</span> location<span class="token punctuation">,</span> redirectedFrom<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>         \n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//_createRoute生成的对象</span>\n<span class="token keyword">const</span> route<span class="token operator">:</span> Route <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> location<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    meta<span class="token operator">:</span> <span class="token punctuation">(</span>record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>meta<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> location<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n    hash<span class="token operator">:</span> location<span class="token punctuation">.</span>hash <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n    query<span class="token punctuation">,</span>\n    params<span class="token operator">:</span> location<span class="token punctuation">.</span>params <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    fullPath<span class="token operator">:</span> <span class="token punctuation">(</span>path <span class="token operator">||</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">stringify</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token operator">+</span> hash<span class="token punctuation">,</span>\n    matched<span class="token operator">:</span> record <span class="token operator">?</span> <span class="token function">formatMatch</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n<span class="token comment">//formatMatch方法</span>\n<span class="token keyword">function</span> <span class="token function">formatMatch</span> <span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    record <span class="token operator">=</span> record<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> res\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p>根据mode的值，对应不同的实现方式，HTML5History 和 HashHistory</p><h3 id="hashhistory-使用-url-hash-值来作路由" tabindex="-1"><a class="header-anchor" href="#hashhistory-使用-url-hash-值来作路由" aria-hidden="true">#</a> HashHistory ：使用 URL hash 值来作路由</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//go</span>\nwindow<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n\n<span class="token comment">//replace</span>\n    <span class="token comment">//supportsPushState</span>\nwindow<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    <span class="token comment">//else</span>\nwindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n\n\n<span class="token comment">//push</span>\n     <span class="token comment">//supportsPushState</span>\n window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n     <span class="token comment">//else</span>\nwindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> path\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="html5history-依赖-html5-history-api" tabindex="-1"><a class="header-anchor" href="#html5history-依赖-html5-history-api" aria-hidden="true">#</a> HTML5History：依赖 HTML5 History API</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//go</span>\nwindow<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n\n<span class="token comment">//replace</span>\nwindow<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n\n<span class="token comment">//push</span>\n window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>pushState：向当前浏览器会话的历史堆栈中添加一个状态（state）</p><p>replaceState: 修改当前历史记录实体</p><h3 id="transitionto" tabindex="-1"><a class="header-anchor" href="#transitionto" aria-hidden="true">#</a> transitionTo</h3><blockquote><p>push、replace会执行transitionTo方法，前进后退go通过监听popstate事件执行transitionTo方法</p></blockquote><h6 id="方法内容" tabindex="-1"><a class="header-anchor" href="#方法内容" aria-hidden="true">#</a> 方法内容：</h6><ol><li>通过matcher中的match获取将要跳转的route</li><li>根据当前的route和要跳转的route比较，实现导航守卫</li><li>把route的值赋值给history.current</li></ol><h3 id="router-view组件" tabindex="-1"><a class="header-anchor" href="#router-view组件" aria-hidden="true">#</a> router-view组件</h3><blockquote><p>在路由改变时，router-view渲染显示路由对应的内容。<code>render</code> 函数、Babel 插件用于在 Vue 中使用 JSX 语法</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">render</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> props<span class="token punctuation">,</span> children<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">const</span> h <span class="token operator">=</span> parent<span class="token punctuation">.</span>$createElement\n     <span class="token keyword">const</span> route <span class="token operator">=</span> parent<span class="token punctuation">.</span>$route\n     <span class="token keyword">const</span> matched <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>\n     <span class="token keyword">const</span> component <span class="token operator">=</span> matched <span class="token operator">&amp;&amp;</span> matched<span class="token punctuation">.</span>components<span class="token punctuation">[</span>name<span class="token punctuation">]</span>\n     <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="transitionto导航守卫的实现" tabindex="-1"><a class="header-anchor" href="#transitionto导航守卫的实现" aria-hidden="true">#</a> transitionTo导航守卫的实现</h2><h3 id="_1-执行resolvequeue方法" tabindex="-1"><a class="header-anchor" href="#_1-执行resolvequeue方法" aria-hidden="true">#</a> 1.执行resolveQueue方法</h3><p>传入current.route.matched和要跳转的route.matched ，获取updated, deactivated, activated方法。当前的路径队列和要跳转的路径队列进行对比，<code>updated</code>相同的部分，<code>activated</code>要跳转的不一样的部分，<code>deactivated</code>为当前的不一样的部分（要销毁的部分）。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolveQueue</span> <span class="token punctuation">(</span>\n  <span class="token parameter">current<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  next<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  updated<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  activated<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  deactivated<span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i\n  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>length<span class="token punctuation">,</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    updated<span class="token operator">:</span> next<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    activated<span class="token operator">:</span> next<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    deactivated<span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_2-收集守卫队列" tabindex="-1"><a class="header-anchor" href="#_2-收集守卫队列" aria-hidden="true">#</a> 2.收集守卫队列</h3><table><thead><tr><th>守卫队列位置</th><th>方法</th></tr></thead><tbody><tr><td>路由实例注册</td><td>beforeEach、beforeResolve、afterEach</td></tr><tr><td>路由配置注册</td><td>beforeEnter</td></tr><tr><td>组件内的路由守卫</td><td>beforeRouteLeave、beforeRouteUpdate、beforeRouteEnter</td></tr></tbody></table><p>获取对应的路由守卫，按下列顺序放入queue中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">const</span> queue<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>\n      <span class="token comment">// in-component leave guards</span>\n      <span class="token function">extractLeaveGuards</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//deactivated（要被摧毁的组件）的beforeRouteLeave   </span>\n      <span class="token comment">// global before hooks</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>beforeHooks<span class="token punctuation">,</span><span class="token comment">//全局的beforeEach</span>\n      <span class="token comment">// in-component update hooks</span>\n      <span class="token function">extractUpdateHooks</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//updated的beforeRouteUpdate</span>\n      <span class="token comment">// in-config enter guards</span>\n      activated<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//activated的beforeEnter</span>\n      <span class="token comment">// async components</span>\n      <span class="token function">resolveAsyncComponents</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span><span class="token comment">//activated的异步组件</span>\n    <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_3-执行runqueue方法" tabindex="-1"><a class="header-anchor" href="#_3-执行runqueue方法" aria-hidden="true">#</a> 3.执行runQueue方法</h3><ol><li><p>迭代器模式来保证遍历队列时每一步都是可控的，fn的第二个参数使迭代器进入下一步，不调用就不会进入下一步</p></li><li><p>队列完成后执行对应的回调函数，cb为结束时调用的回调函数</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 函数核心思想：\n * 1. 迭代器模式来保证遍历队列时每一步都是可控的\n * 2. 队列完成后执行对应的回调函数\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">queue</span> \n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">fn</span> 需要执行的守卫队列\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span></span> <span class="token parameter">cb</span> 迭代器函数，守卫队列的每一个守卫都去执行迭代器函数\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">runQueue</span> <span class="token punctuation">(</span><span class="token parameter">queue<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">&gt;</span><span class="token punctuation">,</span> fn<span class="token operator">:</span> Function<span class="token punctuation">,</span> cb<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">step</span> <span class="token operator">=</span> <span class="token parameter">index</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 队列里已经没有内容可以执行了，那就代表队列执行完成了</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果队列内容存在就执行迭代函数</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token function">step</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 什么也没有那就到下一步了</span>\n        <span class="token function">step</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 启动函数</span>\n  <span class="token function">step</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="_4-fn方法" tabindex="-1"><a class="header-anchor" href="#_4-fn方法" aria-hidden="true">#</a> 4.fn方法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">iterator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">hook<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// next(false) -&gt; abort navigation, ensure current URL</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationAbortedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n            <span class="token function">abort</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>\n            <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span>\n            <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n              <span class="token punctuation">(</span><span class="token keyword">typeof</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// next(&#39;/&#39;) or next({ path: &#39;/&#39; }) -&gt; redirect</span>\n            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationRedirectedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// confirm transition and pass on the value</span>\n            <span class="token function">next</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">abort</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="scrollbehavior" tabindex="-1"><a class="header-anchor" href="#scrollbehavior" aria-hidden="true">#</a> scrollBehavior</h2><p>注意: 这个功能只在支持 <code>history.pushState</code> 的浏览器中可用。</p><h3 id="scrollrestoration" tabindex="-1"><a class="header-anchor" href="#scrollrestoration" aria-hidden="true">#</a> scrollRestoration</h3><p>阻止页面自动滚动恢复行为，防止自动恢复页面位置。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token comment">// Prevent browser scroll behavior on History popstate</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;scrollRestoration&#39;</span> <span class="token keyword">in</span> window<span class="token punctuation">.</span>history<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>scrollRestoration <span class="token operator">=</span> <span class="token string">&#39;manual&#39;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="监听popstate事件触发savescrollposition" tabindex="-1"><a class="header-anchor" href="#监听popstate事件触发savescrollposition" aria-hidden="true">#</a> 监听popstate事件触发saveScrollPosition</h3><p>**需要注意的是调用<code>history.pushState()</code>或<code>history.replaceState()</code>不会触发<code>popstate</code>事件。**只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用<code>history.back()</code>或者<code>history.forward()</code>方法）</p><p>key为历史堆栈的state,保存位置至positionStore</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> positionStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n      x<span class="token operator">:</span> window<span class="token punctuation">.</span>pageXOffset<span class="token punctuation">,</span>\n      y<span class="token operator">:</span> window<span class="token punctuation">.</span>pageYOffset\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="监听popstate或者hashchange事件触发handlescroll" tabindex="-1"><a class="header-anchor" href="#监听popstate或者hashchange事件触发handlescroll" aria-hidden="true">#</a> 监听popstate或者hashchange事件触发handleScroll</h3><p>滚动到原来的位置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">const</span> behavior <span class="token operator">=</span> router<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scrollBehavior\n <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token function">getScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取位置</span>\n <span class="token keyword">const</span> shouldScroll <span class="token operator">=</span> <span class="token function">behavior</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token comment">//执行scrollBehavior方法</span>\n      router<span class="token punctuation">,</span>\n      to<span class="token punctuation">,</span>\n      from<span class="token punctuation">,</span>\n      isPop <span class="token operator">?</span> position <span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">)</span>\n <span class="token operator">...</span>\n window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token comment">//滚动</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><p>官网API：https://router.vuejs.org/zh/api/#router-addroute</p><p>vue-router源码：https://github.com/vuejs/vue-router</p>',53),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}}}]);