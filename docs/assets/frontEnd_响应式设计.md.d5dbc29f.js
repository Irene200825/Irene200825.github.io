import{_ as e,C as t,o as c,c as r,k as a,a as s,H as l,w as p,Q as o}from"./chunks/framework.23b60374.js";const i="/assets/屏幕尺寸.5c71116a.png",E="/assets/元素尺寸.cbd15d67.png",q=JSON.parse('{"title":"响应式设计：适应不同屏幕尺寸和设备的用户界面","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"frontEnd/响应式设计.md","filePath":"frontEnd/响应式设计.md"}'),y={name:"frontEnd/响应式设计.md"},d=o('<h1 id="响应式设计-适应不同屏幕尺寸和设备的用户界面" tabindex="-1">响应式设计：适应不同屏幕尺寸和设备的用户界面 <a class="header-anchor" href="#响应式设计-适应不同屏幕尺寸和设备的用户界面" aria-label="Permalink to &quot;响应式设计：适应不同屏幕尺寸和设备的用户界面&quot;">​</a></h1><h2 id="设备像素、逻辑像素" tabindex="-1">设备像素、逻辑像素 <a class="header-anchor" href="#设备像素、逻辑像素" aria-label="Permalink to &quot;设备像素、逻辑像素&quot;">​</a></h2><ol><li>设备像素（Device Pixels）： <ul><li>设备像素是硬件上的物理像素，它们构成了显示设备的实际分辨率。</li><li>设备像素决定了屏幕的清晰度和精度，通常以像素（px）为单位来表示。</li><li>例如，一个1920x1080分辨率的显示屏有1920个水平像素和1080个垂直像素，这些都是设备像素。</li></ul></li><li>逻辑像素（Logical Pixels）： <ul><li>逻辑像素是相对于设备像素的抽象单位，用于网页开发和移动应用开发中，以便在不同屏幕尺寸和分辨率上保持一致的布局和外观。</li><li>逻辑像素是用于测量和定义元素的尺寸和位置的虚拟像素。</li><li>一个逻辑像素通常等于一个设备像素，但在高DPI（高像素密度）屏幕上，一个逻辑像素可能映射到多个设备像素，以提供更高的清晰度。</li></ul></li></ol><p>逻辑像素的概念允许开发人员创建响应式设计，使网页和应用在不同的屏幕上都能够良好呈现，而不受设备分辨率的影响。通过使用逻辑像素，开发人员可以更容易地管理元素的大小和位置，以确保它们在各种设备上都具有一致的用户体验。</p><h2 id="viewport视口" tabindex="-1">viewport视口 <a class="header-anchor" href="#viewport视口" aria-label="Permalink to &quot;viewport视口&quot;">​</a></h2>',5),h=o('<p>移动端禁止可见区域缩放：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>width: 设置Viewport的宽度，可以使用特定的像素值（例如width=500px）或特定的单位（例如width=device-width表示设备宽度）。<br> height: 设置Viewport的高度，可以使用特定的像素值或特定的单位。<br> initial-scale: 设置初始缩放比例。<br> minimum-scale: 设置最小缩放比例。<br> maximum-scale: 设置最大缩放比例。<br> user-scalable: 控制用户是否能够手动缩放网页，可以设置为yes或no。</p><p>PC端网页通常采用固定布局，其中元素的宽度和位置相对于浏览器窗口是固定的。这意味着网页在不同大小的屏幕上可能会出现滚动条，但通常不需要进行缩放</p><h2 id="常见的屏幕有哪些以及得到的对应的设计稿" tabindex="-1">常见的屏幕有哪些以及得到的对应的设计稿 <a class="header-anchor" href="#常见的屏幕有哪些以及得到的对应的设计稿" aria-label="Permalink to &quot;常见的屏幕有哪些以及得到的对应的设计稿&quot;">​</a></h2>',5),u=a("br",null,null,-1),m=a("br",null,null,-1),b=a("strong",null,"手机设备",-1),_=a("br",null,null,-1),F=a("strong",null,"平板设备",-1),x=a("br",null,null,-1),C=a("strong",null,"桌面设备",-1),f=o('<h3 id="如何查询屏幕大小" tabindex="-1">如何查询屏幕大小 <a class="header-anchor" href="#如何查询屏幕大小" aria-label="Permalink to &quot;如何查询屏幕大小&quot;">​</a></h3><p><img src="'+i+'" alt="屏幕尺寸"><br><img src="'+E+`" alt="元素尺寸"></p><p>另外，需要注意的是，这些方法获取的是当前窗口或文档的大小。如果需要实时监测屏幕大小的变化，可以使用window对象的resize事件监听器来捕获窗口调整大小的事件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resize&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 在这里处理屏幕大小变化的逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resize&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 在这里处理屏幕大小变化的逻辑</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="如何自适应" tabindex="-1">如何自适应 <a class="header-anchor" href="#如何自适应" aria-label="Permalink to &quot;如何自适应&quot;">​</a></h2><ol><li><p>媒体查询（Media Queries）：使用CSS的媒体查询可以根据设备的屏幕尺寸和特性来应用不同的CSS样式。通过设置不同的CSS规则，可以为不同的屏幕宽度范围定义不同的样式，从而实现页面的自适应。</p></li><li><p>弹性布局（Flexbox）：使用CSS的弹性布局可以方便地创建灵活的、响应式的布局。通过设置容器和项目的弹性属性，可以自动调整布局以适应不同屏幕尺寸。</p></li><li><p>REM（相对单位）：使用REM单位可以根据根元素（通常是html）的字体大小来相对地定义其他元素的大小。通过设置根元素的字体大小，并使用REM单位来定义其他元素的大小，可以实现根据屏幕尺寸自适应调整元素大小。</p></li><li><p>使用vw、vh和百分比</p></li></ol><p>注意如果使用强制缩放，会导致图片文字失真模糊。</p><h4 id="媒体查询" tabindex="-1">媒体查询 <a class="header-anchor" href="#媒体查询" aria-label="Permalink to &quot;媒体查询&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">@media</span><span style="color:#E1E4E8;"> mediaType </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (mediaFeature) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> mediaType </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (mediaFeature) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中，mediaType表示媒体类型，可以是all（所有设备）、screen（屏幕设备）、print（打印设备）等。mediaFeature表示媒体特性，例如设备宽度、设备高度、屏幕方向等。<br> 以下是一些常见的媒体特性，用于根据设备的屏幕尺寸应用不同的CSS样式：<br> width：设备宽度<br> height：设备高度<br> orientation：屏幕方向（横向或纵向）<br> min-width：最小宽度<br> max-width：最大宽度<br> min-height：最小高度<br> max-height：最大高度<br> aspect-ratio：宽高比<br> device-pixel-ratio：设备像素比<br> 下面是一个示例，演示如何使用媒体查询根据设备宽度应用不同的样式：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 当设备宽度小于等于600px时应用以下样式*/</span></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">screen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">max-width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">600</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当设备宽度大于600px且小于等于1200px时应用以下样式 */</span></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">screen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">min-width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">601</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">max-width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1200</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当设备宽度大于1200px时应用以下样式 */</span></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">screen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">min-width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1201</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 当设备宽度小于等于600px时应用以下样式*/</span></span>
<span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">max-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">600</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当设备宽度大于600px且小于等于1200px时应用以下样式 */</span></span>
<span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">601</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">max-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1200</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 当设备宽度大于1200px时应用以下样式 */</span></span>
<span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1201</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* CSS样式规则 */</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="弹性布局" tabindex="-1">弹性布局 <a class="header-anchor" href="#弹性布局" aria-label="Permalink to &quot;弹性布局&quot;">​</a></h4><p>弹性容器（Flex Container）的属性：<br> display: flex;：将容器设置为弹性容器。<br> flex-direction：指定主轴的方向（水平或垂直）。<br> justify-content：控制主轴上的元素对齐方式。<br> align-items：控制交叉轴上的元素对齐方式。<br> flex-wrap：指定元素是否换行以及换行的方式。<br> 弹性项目（Flex Items）的属性：<br> flex-grow：定义元素在剩余空间中的放大比例。<br> flex-shrink：定义元素在空间不足时的缩小比例。<br> flex-basis：定义元素在分配多余空间之前的初始大小。<br> flex：缩写属性，包括flex-grow、flex-shrink和flex-basis的值。<br> align-self：控制单个元素在交叉轴上的对齐方式。</p><h4 id="rem-相对单位" tabindex="-1">REM（相对单位） <a class="header-anchor" href="#rem-相对单位" aria-label="Permalink to &quot;REM（相对单位）&quot;">​</a></h4><p>原理：css3规定：1rem的大小就是根元素html的font-size的值。<br> rem在桌面浏览器上的初始值是16px（即1rem = 16px）。<br> 淘宝手机端：  大名鼎鼎的Flexible</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><p>pc端响应式设计：</p><p>不适合使用vw，因为我们会有横向滚动条；使用media screen+flex，限制最小为1280px。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">min-width</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">1280</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.title </span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">font-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">50</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> } </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">@media</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">screen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">min-width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1440</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">.title </span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">font-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">60</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">html</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1280</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">.title </span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">50</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> } </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">@media</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">screen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">min-width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1440</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">.title </span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">font-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">60</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>移动端响应式设计：<br> 由于viewport单位得到众多浏览器的兼容，lib-flexible这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用viewport来替代此方法。</p><p>Vue移动端适配解决方案：<br> postcss-px-to-viewport：<a href="https://juejin.cn/post/7018433228591595550" target="_blank" rel="noreferrer">https://juejin.cn/post/7018433228591595550</a> 移动端适配：<a href="https://juejin.cn/post/7084926646033055752" target="_blank" rel="noreferrer">https://juejin.cn/post/7084926646033055752</a><br> 兼容vant：<a href="https://juejin.cn/post/6844904146865225742" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904146865225742</a></p>`,21);function g(A,v,w,D,k,S){const n=t("font");return c(),r("div",null,[d,a("p",null,[s("Viewport是指用户在屏幕上看到的"),l(n,{color:"#4357AD"},{default:p(()=>[s("可见区域")]),_:1}),s("，而视口元标签和响应式设计技术允许开发人员控制和优化网页在不同设备上的呈现方式，以提供最佳的用户体验。")]),h,a("p",null,[s("常见的屏幕大小包括："),u,s(" 设计师给的设计稿是物理分辨率，会是我们写样式的逻辑分辨率的两倍。"),m,b,s("：包括智能手机和小型平板电脑等移动设备。典型的视口宽度范围可以是"),l(n,{color:"#C1666B"},{default:p(()=>[s("320px到768px")]),_:1}),s("之间。设计稿"),l(n,{color:"#48A9A6"},{default:p(()=>[s("750x1334")]),_:1}),s("（一般使用二倍图设计稿）。"),_,F,s("：包括中型和大型平板电脑。典型的视口宽度范围可以是"),l(n,{color:"#C1666B"},{default:p(()=>[s("768px到1024px")]),_:1}),s("之间。使用768x1024这个尺寸作图，然后输出2倍图"),l(n,{color:"#48A9A6"},{default:p(()=>[s("1536x2048")]),_:1}),s("，即可输出iPad mini和iPad的设计稿。"),x,C,s("：包括台式机和笔记本电脑等大屏幕设备。典型的视口宽度范围可以是"),l(n,{color:"#C1666B"},{default:p(()=>[s("1024px")]),_:1}),s("以上。使用"),l(n,{color:"#48A9A6"},{default:p(()=>[s("1920x1080(最常用)或者1366x768")]),_:1}),s("。随着高分辨率显示器的普及，一些设计师也倾向于采用更大的设计稿尺寸，以提供更高质量和更丰富的视觉体验。")]),f])}const P=e(y,[["render",g]]);export{q as __pageData,P as default};
